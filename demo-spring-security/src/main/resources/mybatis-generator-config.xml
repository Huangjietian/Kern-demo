<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>

    <!--基础配置说明:
    1. 替换本地数据库驱动 真实路径 替换<classPathEntry location="" />中的内容
    2. 设置数据库链接 设置 jdbcConnection 块中属性的值
    3. 指定生成文件包名 分别在
    javaModelGenerator sqlMapGenerator javaClientGenerator块中的
    targetPackage的属性后添加.XX 以对生成文件的包 进行命名
    4. 指定table块属性
    -->

    <!-- 本地数据库驱动程序jar包的全路径 -->
    <classPathEntry location="D:\respository_mvn\org\postgresql\postgresql\42.2.12\postgresql-42.2.12.jar"/>

    <context id="testTables" targetRuntime="MyBatis3">
        <!-- generate entity时，生成hashcode和equals方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->
        <!-- generate entity时，生成serialVersionUID -->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->
        <!-- genenat entity时,生成toString -->
<!--        <plugin type="com.onesports.swms.dao.generator.MyToStringPlugin"/>-->
        <commentGenerator>
            <!-- 是否去除自动生成的英文注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 格式化java代码-->
            <property name="DefaultJavaFormatter" value="true"/>
            <!-- 格式化XML代码-->
            <property name="DefaultXmlFormatter" value="true"/>

        </commentGenerator>
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://localhost:5432/testdb"
                        userId="postgres"
                        password="postgres">
        </jdbcConnection>
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
           NUMERIC 类型解析为java.math.BigDecimal
            scale>0;length>18：使用BigDecimal;
      scale=0;length[10,18]：使用Long；
      scale=0;length[5,9]：使用Integer；
      scale=0;length<5：使用Short；-->
        <!--<javaTypeResolver> -->
        <!--<property name="forceBigDecimals" value="true"/> -->
        <!--</javaTypeResolver> -->
<!--        <javaTypeResolver type="com.onesports.swms.dao.generator.MyJavaTypeResolver">-->
<!--        </javaTypeResolver>-->

        <!-- targetProject:生成PO类的位置 -->
        <javaModelGenerator targetPackage="cn.kerninventory.demos.spring.security.model"
                            targetProject="demo-spring-security\src\main\java">
            <!--targetProject="src/main/java">-->
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 从数据库返回的值被清理前后的空格，是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="false"/>
            <!-- 配置PO类需要继承的基类 -->
<!--            <property name="rootClass" value="com.onesports.swms.base.model.LongBaseEntity"/>-->
        </javaModelGenerator>

        <!-- targetProject:mapper映射文件生成的位置
           如果maven工程只是单独的一个工程，targetProject="src/main/java"
           若果maven工程是分模块的工程，targetProject="所属模块的名称"，例如：
           targetProject="ecps-manager-mybatis"，下同-->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="demo-spring-security\src\main\resources">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- targetPackage：mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="cn.kerninventory.demos.spring.security.mapper"
                             targetProject="demo-spring-security\src\main\java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 指定数据库表 -->
        <table tableName="test_user" domainObjectName="TestUser"/>

    </context>

</generatorConfiguration>