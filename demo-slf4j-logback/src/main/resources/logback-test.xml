<!--配置文件，只要符合logback的解析规则就可以-->
<!--在 logback 版本 0.9.17 之后，显示规定的标签名不区分大小写。-->

<!--appender 输出目的地-->
<!--layout   输出的格式-->
<!--root     根日志-->

<!--scan=true, 配置文件修改时自动扫描，默认一分钟扫描一次, 该文件中设置30S扫描一次-->
<!--当设置了 scan="true"，会新建一个 ReconfigureOnChangeTask 任务用于监视配置文件是否变化。ReconfigureOnChangeTask 也会自动监视外部文件的变化。-->
<!--如果更改后的配置文件有语法错误，则会回退到之前的配置文件。-->
<!-- packagingData="true"启用展示包数据，开销比较大-->
<configuration
        scan="true" scanPeriod="30 seconds"
        packagingData="true"
>
<!--    设置日志上下文的名称-->
    <contextName>LOGBACK</contextName>
<!--    设置属性-->
    <property name="basicDir" value="/logs" />
<!--    设置属性，引入其他配置文件-->
    <property resource="filedir.properties" />

<!--    配置该属性则将打印配置文件的状态， 这将与设置root.level=debug 取得一样的效果-->
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />

<!--    appender 通过 <appender> 元素进行配置，
    需要两个强制的属性 name 与 class。
    name 属性用来指定 appender 的名字，
    class 属性需要指定类的全限定名用于实例化。

    <appender> 元素可以包含
    0 或一个 <layout> 元素，
    0 或多个 <encoder> 元素，
    0 或多个 <filter> 元素。
    除了这些公共的元素之外，<appender> 元素可以包含任意与 appender 类的 JavaBean 属性相一致的元素。-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
<!--    <encoder 元素强制一个 class 属性去指定一个类的全限定名，用于实例化。
        如果 encoder 的 class 是 PatternLayoutEncoder，那么基于默认类映射，class 属性可以被隐藏。-->
        <encoder>
            <pattern>[%t] %level %d{yyyy-MM-dd'T'HH:mm:ss} %class.%method[%line] %msg%n</pattern>
        </encoder>
<!--        默认为System.out   System.out  / System.err-->
        <target>System.out</target>
    </appender>

<!--     通过 "bySecond" 将时间格式化成 "yyyyMMdd'T'HHmmss" 的形式插入到 logger 的上下文中,这个值对后续的配置也适用-->
    <property name="filename" value="${dir.logs}/demolog.log"/>

    <appender name="localFile" class="ch.qos.logback.core.FileAppender">
<!--        文件名-->
        <file>${filename}</file>
        <!--            只输出INFO以上的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
<!--        是否追加，false覆盖，默认true-->
        <append>true</append>
<!--        将 immediateFlush 设置为 false 可以获得更高的日志吞吐量,默认方法更加的安全。 -->
        <immediateFlush>true</immediateFlush>

        <!--        encoder即该appender的输出格式配置-->
        <encoder>
            <pattern>%level %d{yyyy-MM-dd'T'HH:mm:ss} %class.%method[%line] %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="warnRolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
<!--        滚动规则-->
<!--        只输出WARN以上的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${dir.logs}/%d{yyyy-MM-dd'T'HHmm}/rollingLog.%d{yyyy-MM-dd'T'HHmmss,aux}.log</fileNamePattern>
            <maxHistory>5</maxHistory>
            <totalSizeCap>1MB</totalSizeCap>
        </rollingPolicy>
<!--        encoder即该appender的输出格式配置-->
        <encoder>
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
        </encoder>
    </appender>

<!--    手动添加的logger 除name之外其余都是可选的 -->
    <logger name="default" level="debug" additivity="true">
        <appender-ref ref="console" />
        <appender-ref ref="localFile" />
    </logger>

<!--    最多只能有一个root元素存在-->
<!--    root的level和appender-ref是唯二可以配置的属性-->
    <root level="DEBUG">
<!--        root 与 输出目的地的映射-->
        <appender-ref ref="console" />
        <appender-ref ref="localFile" />
        <appender-ref ref="warnRolling"/>
    </root>

</configuration>